datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum ReportType {
  USER
  COURSE
  ORDER
  SUBSCRIPTION
  OTHER
}

enum ReportStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserType {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String        @unique
  password        String
  image           String?
  uploaded        Boolean       @default(false)
  purchases       Purchase[]
  downloadHistory Json?
  userGroups      UserGroup[]
  subscription    Subscription?
  isSubscribed    Boolean       @default(false)
  subscriptionEnd DateTime?
  orders          Order[]
  userType        UserType
  userStatus      UserStatus    @default(PENDING) // User's status
  status          OrderStatus   @default(PENDING) // Order status
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Report          Report[]

  @@map("users")
}

model Admin {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String
  image    String?
  uploaded Boolean @default(false) // Ensure this field exists
  role     String

  groupsManaged Group[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admin")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  image       String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  type      String
  amount    Float
  isActive  Boolean  @default(false)
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Course {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  originalPrice Float
  discount      Float?
  finalPrice    Float
  tags          String[]
  file          String[]
  imageFiles    String[]
  downloads     Int        @default(0)
  category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    String     @db.ObjectId
  purchases     Purchase[] // Updated this line
  orders        Order[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("courses")
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  course        Course?     @relation(fields: [courseId], references: [id])
  courseId      String?     @db.ObjectId
  paymentStatus OrderStatus
  amount        Float
  paymentMethod String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("orders")
}

model Group {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String
  userGroups  UserGroup[]
  createdBy   Admin       @relation(fields: [createdById], references: [id])
  createdById String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("groups")
}

model UserGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  @@unique([userId, groupId])
  @@map("usergroups")
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("purchases")
}

model Report {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  reportType    ReportType
  status        ReportStatus
  generatedBy   User         @relation(fields: [generatedById], references: [id])
  generatedById String       @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("reports")
}
