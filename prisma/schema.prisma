datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String            @unique
  password         String
  image            String?
  uploaded         Boolean           @default(false)
  purchasedCourses PurchasedCourse[]
  subscription     Subscription?
  downloadHistory  Json?
  userGroups       UserGroup[]
  orders           Order[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("users")
}

model Admin {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  password      String
  image         String?
  groupsManaged Group[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admin")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("category")
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  type      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscription")
}

model Course {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  price            Float
  tags             String[]
  file             String
  downloads        Int               @default(0)
  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       String            @db.ObjectId
  purchasedCourses PurchasedCourse[]
  orders           Order[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("course")
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String   @db.ObjectId
  paymentStatus String
  amount        Float
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("order")
}

model Group {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  userGroups  UserGroup[]
  createdBy   Admin       @relation(fields: [createdById], references: [id])
  createdById String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("group")
}

model UserGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  @@unique([userId, groupId])
  @@map("usergroup")
}

model PurchasedCourse {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId

  @@unique([userId, courseId])
  @@map("purchasedcourse")
}
